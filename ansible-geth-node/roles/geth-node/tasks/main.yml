---
- name: add ether user
  user:
    name: "{{ geth_user }}"
    
- name: "create {{ geth_user }} build dir"
  become_user: "{{ geth_user }}"
  file:
    path: "/home/{{ geth_user }}/build/"
    owner: "{{ geth_user }}"
    group: "{{ geth_user }}"
    state: directory

- name: create geth extraction dir
  become_user: "{{ geth_user }}"
  file:
    path: "/home/{{ geth_user }}/build/geth"
    owner: "{{ geth_user }}"
    group: "{{ geth_user }}"
    state: directory

- name: download geth
  become_user: "{{ geth_user }}"
  get_url:
    url: "https://gethstore.blob.core.windows.net/builds/{{ geth_build }}.tar.gz"
    dest: "/home/{{ geth_user }}/build/{{ geth_build }}.tar.gz"
    mode: 0644
    checksum: "{{ geth_checksum }}"

- name: extract geth tarball
  become_user: "{{ geth_user }}"
  unarchive:
    remote_src: yes
    src: "/home/{{ geth_user }}/build/{{ geth_build }}.tar.gz"
    dest: "/home/{{ geth_user }}/build/"

- name: create .local/bin
  become_user: "{{ geth_user }}"
  file:
    path: "/home/{{ geth_user }}/.local/bin"
    owner: "{{ geth_user }}"
    group: "{{ geth_user }}"
    state: directory

- name: put geth executable in ~/.local/bin
  become_user: "{{ geth_user }}"
  shell: "cp /home/{{ geth_user }}/build/{{ geth_build }}/geth /home/{{ geth_user }}/.local/bin/geth"

- name: update ether's environment
  become_user: "{{ geth_user }}"
  script: "../files/addpath.sh /home/{{ geth_user }}/.local/bin"

- name: create .ethereum
  file:
    state: directory
    path: /home/{{ geth_user }}/.ethereum
    owner: ether
    group: ether
    mode: 0750

- name: check firewalld availability
  shell: firewall-cmd --state
  register: firewall_state
  ignore_errors: true

- name: create geth directory
  file:
    state: directory
    path: "{{ geth_datadir }}"
    owner: ether
    group: ether
    mode: 0755

- name: symlink chaindata to /data
  file:
    state: link
    path: /home/{{ geth_user }}/.ethereum/geth
    src: "{{ geth_datadir }}"

- name: install service file
  template:
    src: ../templates/geth.service
    dest: /lib/systemd/system/geth.service
    owner: root
    group: root
    mode: 0644

- name: reload systemd
  shell: systemctl daemon-reload

- name: ensure geth service started
  service: 
    name: geth
    state: restarted

# Checks for an account.  1 for no accounts, 0 for accounts found
- name: check for an account
  shell: geth account list 2>&1 | grep "No etherbase" | wc -l
  register: account_check

- name: if no account, create one
  shell: "geth account create --datadir {{ geth_datadir }} --password {{ geth_etherbase_password }}"
  when: geth_etherbase_password is defined and account_check.stdout == 1

- name: ensure RPC access allowed
  firewalld:
    state: enabled
    zone: public
    port: "{{ geth_rpcport }}/tcp"
    permanent: true
  when: geth_rpcport is defined and geth_rpcpublic == true and firewall_state.stdout == 'running'

